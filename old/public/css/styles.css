/*------------------------------------*\
    $FONTS
\*------------------------------------*/

/**
 * @license
 * MyFonts Webfont Build ID 3279254, 2016-09-06T11:27:23-0400
 *
 * The fonts listed in this notice are subject to the End User License
 * Agreement(s) entered into by the website owner. All other parties are
 * explicitly restricted from using the Licensed Webfonts(s).
 *
 * You may obtain a valid license at the URLs below.
 *
 * Webfont: HoosegowJNL by Jeff Levine
 * URL: http://www.myfonts.com/fonts/jnlevine/hoosegow/regular/
 * Copyright: (c) 2009 by Jeffrey N. Levine.  All rights reserved.
 * Licensed pageviews: 200,000
 *
 *
 * License: http://www.myfonts.com/viewlicense?type=web&buildid=3279254
 *
 * Â© 2016 MyFonts Inc
*/


/* @import must be at top of file, otherwise CSS will not work */

/*------------------------------------*\
    $FORMS
\*------------------------------------*/

form ol, form ul {
  list-style: none;
  margin-left: 0;
}

legend {
  font-weight: bold;
  margin-bottom: $space-and-half;
  display: block;
}

fieldset {
  border: 0;
  padding: 0;
  margin: 0;
  min-width: 0;
}

label {
  display: block;
}

button, input, select, textarea {
  font-family: inherit;
  font-size: 100%;
}

textarea {
  line-height: 1.5;
}

button, input, select, textarea {
  -webkit-appearance: none;
  -webkit-border-radius: 0px;
}

input[type=text], input[type=email], input[type=tel], input[type=search], input[type=url], input[type=number], textarea {
  border: $border-style;
  background-color: $white;
  width: 100%;
  outline: 0;
  display: block;
  transition: all .5s $cubic-bezier;
  padding: $pad-half;
}

input[type="search"] {
  -webkit-appearance: none;
  border-radius: 0;
}

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Form Field Container
 */
.field-container {
  margin-bottom: $space;
}

/**
 * Validation
 */
.has-error {
  border-color: $error;
}
.is-valid {
  border-color: $valid;
}

/*------------------------------------*\
    $HEADINGS
\*------------------------------------*/

/*------------------------------------*\
    $LINKS
\*------------------------------------*/

a {
  text-decoration: none;
  color: $link-color;
  transition: all .6s ease-out;
  cursor: pointer;
  &:hover {
    text-decoration: none;
    color: $link-hover;
  }
  p {
    color: $body-color;
  }
}

a.icon {
  .path-fill--pink {
    path {
      @include transition;
    }
  }
  &:hover {
    .path-fill--pink {
      path {
        fill: $dark-pink;
      }
    }
  }
}

.background--purple {
  a {
    color: $pink;
    &:hover {
      color: $link-color;
    }
  }
}

/*------------------------------------*\
    $LISTS
\*------------------------------------*/

ol, ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

/**
 * Definition Lists
 */
dl {
  overflow: hidden;
  margin: 0 0 $space;
}
dt {
  font-weight: bold;
}
dd {
  margin-left: 0;
}

/*------------------------------------*\
    $SITE MAIN
\*------------------------------------*/

html,
body {
  overflow-x: hidden;
}
body {
  background: $background-color;
  font: 400 100%/1.3 $font;
  -webkit-text-size-adjust: 100%;
  -webkit-font-smoothing: antialiased;
  color: $body-color;
}

/*------------------------------------*\
    $MEDIA ELEMENTS
\*------------------------------------*/

/**
 * Flexible Media
 */
img, video, object, svg, iframe {
  max-width: 100%;
  border: none;
}
svg {
  max-height: 100%;
}
img[src$=".svg"] {
  width: 100%;
}
picture {
  display: block;
  line-height: 0;
}
figure {
  max-width: 100%;
  img {
    margin-bottom: 0;
  }
}
figcaption,
.fc-style {
  font-weight: 400;
  color: $gray;
  font-size: rem(14);
  padding-top: rem(3);
  margin-bottom: rem(5);
}

/*------------------------------------*\
    $PRINT STYLES
\*------------------------------------*/

@media print {
  *,
  *:before,
  *:after,
  *:first-letter,
  *:first-line {
    background: transparent !important;
    color: $black !important;
    box-shadow: none !important;
    text-shadow: none !important;
  }
  a,
  a:visited {
    text-decoration: underline;
  }
  a[href]:after {
    content: " (" attr(href) ")";
  }
  abbr[title]:after {
    content: " (" attr(title) ")";
  }
  /*
   * Don't show links that are fragment identifiers,
   * or use the `javascript:` pseudo protocol
   */
  a[href^="#"]:after,
  a[href^="javascript:"]:after {
    content: "";
  }
  pre,
  blockquote {
    border: 1px solid $border-color;
    page-break-inside: avoid;
  }
  /*
   * Printing Tables:
   * http://css-discuss.incutio.com/wiki/Printing_Tables
   */
  thead {
    display: table-header-group;
  }
  tr, img {
    page-break-inside: avoid;
  }
  img {
    max-width: 100% !important;
  }
  p, h2, h3 {
    orphans: 3;
    widows: 3;
  }
  h2, h3 {
    page-break-after: avoid;
  }
  .no-print,
  #header,
  #footer,
  .ad {
    display: none;
  }
}

/*------------------------------------*\
    $TABLES
\*------------------------------------*/

table {
  border-collapse: collapse;
  border-spacing: 0;
  border: 1px solid $border-color;
  width: 100%;
}
th {
  text-align: left;
  border: 1px solid $border-color;
  padding: 0.2em;
}
td {
  border: 1px solid $border-color;
  padding: 0.2em;
}

/**
 * Table Layout
 */
.t {
  display: table;
}
.t-cell {
  display: table-cell;
}

/*------------------------------------*\
    $TEXT ELEMENTS
\*------------------------------------*/

/**
 * Abstracted paragraphs
 */
p { @include p; }
ul { @include p; }
ol { @include p; }
dt { @include p; }
dd { @include p; }

pre {
  font-size: rem(18);
}


/**
 * Bold
 */
strong, b {
  font-weight: 700;
}

/**
 * Horizontal Rule
 */
hr {
  height: 1px;
  border: none;
  background-color: $border-color;
  margin-top: $space-double;
  margin-bottom: $space-double;
  @include center-block;
}

/**
 * Abbreviation
 */
abbr {
  border-bottom: 1px dotted $border-color;
  cursor: help;
}

/**
 * Blockquote
 */
blockquote:not(.pullquote) {
  padding: $pad;
  text-align: left;
  clear: both;
  border-left: 10px solid $border-color;
  p {
    color: $gray;
    font-style: italic;
    margin-bottom: 0;
    quotes: "\201C""\201D""\2018""\2019";
    &:before {
      content: open-quote;
    }
    &:after {
      content: close-quote;
    }
  }
  @include mq($px900) {
    padding: $pad-and-half;
  }
}

/*------------------------------------*\
    $RESET
\*------------------------------------*/

/* Border-Box http:/paulirish.com/2012/box-sizing-border-box-ftw/ */
* {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}
html, body, div, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, ol, ul, li, form, legend, label, table, header, footer, nav, section, figure {
  margin: 0;
  padding: 0;
}
header, footer, nav, section, article, hgroup, figure {
  display: block;
}

/*------------------------------------*\
    $GRIDS
\*------------------------------------*/

/**
 * Simple grid - keep adding more elements to the row until the max is hit
 * (based on the flex-basis for each item), then start new row.
 */
.grid {
  display: flex;
  display: inline-flex;
  flex-flow: row wrap;
}

/**
 * Fixed Gutters
 */
@mixin column-gutters() {
  padding-left: rem(gutter(mobile));
  padding-right: rem(gutter(mobile));
  @include media('>xlarge') {
    padding-left: rem(gutter(desktop));
    padding-right: rem(gutter(desktop));
    &.left-gutter--l { padding-left: rem(30); }
    &.right-gutter--l { padding-right: rem(30); }
    &.left-gutter--xl { padding-left: rem(60); }
    &.right-gutter--xl { padding-right: rem(60); }
  }
}

[class*="grid--"] {
  &.no-gutters {
    margin-left: 0;
    margin-right: 0;
    > .grid-item {
      padding-left: 0;
      padding-right: 0;
    }
  }
  > .grid-item {
    @include column-gutters();
    box-sizing: border-box;
  }
}

@mixin layout-in-column {
  margin-left: -1 * rem(gutter(mobile));
  margin-right: -1 * rem(gutter(mobile));
  @include media('>xlarge') {
    margin-left: -1 * rem(gutter(desktop));
    margin-right: -1 * rem(gutter(desktop));
  }
}

[class*="grid--"] {
  @include layout-in-column;
}

.grid-item {
  width: 100%;
  box-sizing: border-box;
}

.grid-item--full {
  width: 100% !important;
  text-align: center;
}


/**
* 1 to 2 column grid at 50% each.
*/
.grid--50-50 {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
  > .grid-item {
    display: flex;
    flex-wrap: wrap;
    width: 50%;
    &:nth-child(2) {
     margin-top: 0;
    }
  }
}


/**
 * 3 column grid
 */
.grid--3-col {
  @include media('>medium') {
    width: 100%;
    > * {
      width: 33.3333%;
    }
  }
}

/**
 * 4 column grid
 */
.grid--4-col {
  width: 100%;
  @include media('>medium') {
    > * {
      width: 50%;
    }
  }
  @include media('>large') {
    > * {
      width: 25%;
    }
  }
}

.grid--4-col-only {
  > * {
    width: 25%;
  }
}

/*------------------------------------*\
    $WRAPPERS & CONTAINERS
\*------------------------------------*/

/**
 * Layout containers - keep content centered and within a maximum width. Also
 * adjusts left and right padding as the viewport widens.
 */
 .layout-container {
  max-width: $max-width;
  margin: 0 auto;
  position: relative;
  padding-left: $pad;
  padding-right: $pad;
  @include media('>large') {
    padding-left: $pad-double;
    padding-right: $pad-double;
  }
}
.layout-container--no-max {
  max-width: none;
}

.flex-container {
  display: block;
  @include media('>large') {
    display: flex;
  }
}
.shift-left--fluid {
  width: 100%;
  @include media('>large') {
    padding-right: $pad;
  }
}
.shift-right--fluid {
  margin-top: $space;
  @include media('>large') {
    margin-top: 0;
    min-width: rem($sidebar-width);
    width: rem($sidebar-width);
    padding-left: $pad-double;
    border-left: $border-style;
  }
}

/**
 * Wrapping element to keep content contained and centered.
 */
.wrap {
  max-width: $max-width;
  margin: 0 auto;
}

/**
 * Wrapping element to keep content contained and centered at narrower widths.
 */
.narrow {
  max-width: rem(726);
}
.narrow--xs {
  max-width: rem(450);
  @include mq($px800) {
    max-width: rem(750);
  }
}
.narrow--s {
  max-width: rem(750);
  @include media('>large') {
  }
}
.narrow--m {
  max-width: rem(850);
}
.narrow--l {
  max-width: $article-max;
}
.narrow--xl {
  max-width: rem(1260);
  padding-left: $pad-half;
  padding-right: $pad-half;
  @include media('>large') {
    padding-left: $pad;
    padding-right: $pad;
  }
}

.max-width--150--at-medium {
  @include media('>medium') {
    max-width: rem(150);
  }
}
.max-width--300--at-medium {
  @include media('>medium') {
    max-width: rem(300);
  }
}

/*------------------------------------*\
    $ANIMATIONS & TRANSITIONS
\*------------------------------------*/

/**
 * Transitions
 */
.trans {
  @include transition;
}

// Fade in and slide up from bottom
.fade-up {
  transform: translateY(40px);
  animation: fade-up 1.4s $cubic-bezier forwards;
}
@keyframes fade-up {
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

// Fade in and slide right from left
.fade-right {
  transform-origin: center left;
  transform: translateX(-20px);
  animation: fade-right .4s ease-out forwards;
}
.fade-right:nth-child(even) {
  animation-delay: 300ms;
}
@keyframes fade-right {
  to {
    transform: translateX(0);
    opacity: 1;
  }
}
// Fade in and slide left from right
.fade-left {
  transform-origin: center right;
  transform: translateX(20px);
  animation: fade-left .4s ease-out forwards;
}
.fade-left:nth-child(even) {
  animation-delay: 300ms;
}
@keyframes fade-left {
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

.has-odd-animation {
  .fade-up:nth-child(even) {
    animation-delay: 200ms;
  }
}
.has-delay-animation {
  @for $i from 1 through 20 {
  	.fade-up:nth-child(#{$i}) {
      animation-delay: #{$i}00ms;
  	}
  }
}

/*------------------------------------*\
    $BORDERS
\*------------------------------------*/

/**
 * Borders/Dividers
 */
.border {
  border: $border-style;
}

/*------------------------------------*\
    $COLOR MODIFIERS
\*------------------------------------*/

/**
 * Text Colors
 */
.color--gray {
  color: $gray;
}
.color--light-gray {
  color: $gray-light;
}
.color--black {
  color: $black;
}
.color--white {
  color: $white;
  -webkit-font-smoothing: antialiased;
}


/**
 * Background Colors
 */
.no-bg {
  background: none;
}
.background--white {
  background-color: $white;
}
.background--black {
  background-color: $black;
}


/**
 * Path Fills
 */
.path-fill--white {
  path {
    fill: $white;
  }
}
.path-fill--black {
  path {
    fill: $black;
  }
}

/*------------------------------------*\
    $DISPLAY STATES
\*------------------------------------*/

/**
 * Completely remove from the flow and screen readers.
 */
.is-hidden {
  display: none !important;
  visibility: hidden !important;
}
.hide {
  display: none;
}

/**
 * Completely remove from the flow but leave available to screen readers.
 */
.is-vishidden,
.screen-reader-text,
.sr-only {
  position: absolute !important;
  overflow: hidden;
  width: 1px;
  height: 1px;
  padding: 0;
  border: 0;
  clip: rect(1px, 1px, 1px, 1px);
}

.has-overlay {
  background:linear-gradient(
    rgba($black, 0.45)
  );
}

/**
 * Display Classes
 */
.display--inline-block {
  display: inline-block;
}
.display--flex {
  display: flex;
}
.display--table {
  display: table;
}
.display--block {
  display: block;
}
.flex {
  display: flex;
}
.flex-justify--flex-end {
  justify-content: flex-end;
}
.flex-justify--flex-start {
  justify-content: flex-start;
}
.flex-justify--center {
  justify-content: center;
}
.flex-align--flex-end {
  align-items: flex-end;
}
.flex-align--flex-start {
  align-items: flex-start;
}
.flex-align--center {
  align-items: center;
}

.hide-until--s {
  @include media('<=small') {
    display: none;
  }
}
.hide-until--m {
  @include media('<=medium') {
    display: none;
  }
}
.hide-until--l {
  @include media('<=large') {
    display: none;
  }
}
.hide-until--xl {
  @include media('<=xlarge') {
    display: none;
  }
}
.hide-until--xxl {
  @include media('<=xxlarge') {
    display: none;
  }
}
.hide-until--xxxl {
  @include media('<=xxxlarge') {
    display: none;
  }
}
.hide-after--s {
  @include media('>small') {
    display: none;
  }
}
.hide-after--m {
  @include media('>medium') {
    display: none;
  }
}
.hide-after--l {
  @include media('>large') {
    display: none;
  }
}
.hide-after--xl {
  @include media('>xlarge') {
    display: none;
  }
}
.hide-after--xxl {
  @include media('>xxlarge') {
    display: none;
  }
}
.hide-after--xxxl {
  @include media('>xxxlarge') {
    display: none;
  }
}

/*------------------------------------*\
    $FILTER STYLES
\*------------------------------------*/

/**
 * Filters
 */
.filter--saturate {
  @include filter(saturate, 100%);
  @include transition;
  &:hover {
    @include filter(saturate, 150%);
  }
}
.filter--saturate-x2 {
  &:hover {
    @include filter(saturate, 250%);
  }
}
.filter--grayscale {
  @include filter(grayscale, 100%);
}
.filter--sepia {
  @include filter(sepia, 100%);
}

/*------------------------------------*\
    $SPACING
\*------------------------------------*/

// For more information on this spacing technique, please see:
// http://alistapart.com/article/axiomatic-css-and-lobotomized-owls.

.spacing {
  & > * + * {
    margin-top: rem(verticalSpacing(mobile));
    @include media('>large') {
      margin-top: rem(verticalSpacing(desktop));
    }
  }
}
.spacing--quarter {
  & > * + * {
    margin-top: rem(verticalSpacing(mobile)/4);
    @include media('>large') {
      margin-top: rem(verticalSpacing(desktop)/4);
    }
  }
}
.spacing--half {
  & > * + * {
    margin-top: rem(verticalSpacing(mobile)/2);
    @include media('>large') {
      margin-top: rem(verticalSpacing(desktop)/2);
    }
  }
}
.spacing--one-and-half {
  & > * + * {
    margin-top: rem(verticalSpacing(mobile)*1.5);
    @include media('>large') {
      margin-top: rem(verticalSpacing(desktop)*1.5);
    }
  }
}
.spacing--double {
  & > * + * {
    margin-top: rem(verticalSpacing(mobile)*2);
    @include media('>large') {
      margin-top: rem(verticalSpacing(desktop)*2);
    }
  }
}
.spacing--double--at-large {
  & > * + * {
    margin-top: rem(verticalSpacing(mobile));
    @include media('>large') {
      margin-top: rem(verticalSpacing(desktop)*2);
    }
  }
}
.spacing--triple {
  & > * + * {
    margin-top: rem(verticalSpacing(mobile)*3);
    @include media('>large') {
      margin-top: rem(verticalSpacing(desktop)*3);
    }
  }
}
.spacing--quad {
  & > * + * {
    margin-top: rem(verticalSpacing(mobile)*4);
    @include media('>large') {
      margin-top: rem(verticalSpacing(desktop)*4);
    }
  }
}
.spacing--xl {
  & > * + * {
    margin-top: rem(verticalSpacing(mobile)*4);
    @include media('>medium') {
      margin-top: rem(verticalSpacing(desktop)*6);
    }
    @include media('>large') {
      margin-top: rem(verticalSpacing(desktop)*8);
    }
  }
}
.spacing--zero {
  & > * + * {
    margin-top: 0;
  }
}
.spacing--bottom {
  margin-bottom: rem(verticalSpacing(mobile));
  @include media('>large') {
      margin-bottom: rem(verticalSpacing(desktop));
  }
}
.spacing--bottom-half {
  margin-bottom: rem(verticalSpacing(mobile)/2);
  @include media('>large') {
      margin-bottom: rem(verticalSpacing(desktop)/2);
  }
}
.spacing--bottom-double {
  margin-bottom: rem(verticalSpacing(mobile)*2);
  @include media('>large') {
      margin-bottom: rem(verticalSpacing(desktop)*2);
  }
}
.spacing--top {
  margin-top: rem(verticalSpacing(mobile));
  @include media('>large') {
      margin-top: rem(verticalSpacing(desktop));
  }
}
.spacing--top-double {
  margin-top: rem(verticalSpacing(mobile)*2);
  @include media('>large') {
      margin-top: rem(verticalSpacing(desktop)*2);
  }
}
.no-spacing--after-xlarge {
    @include media('>xlarge') {
        margin-top: 0;
    }
}

.space--top {
  margin-top: $space;
}
.space--bottom {
  margin-bottom: $space;
}
.space--left {
  margin-left: $space;
}
.space--right {
  margin-right: $space;
}
.space--top-half {
  margin-top: $space-half;
}
.space--bottom-half {
  margin-bottom: $space-half;
}
.space--left-half {
  margin-left: $space-half;
}
.space--right-half {
  margin-right: $space-half;
}
.space--bottom-double {
  margin-bottom: $space-double;
}
.space--top-double {
  margin-top: $space-double;
}
/**
 * Padding
 */
.padding {
  padding: rem(verticalSpacing(mobile));
  @include media('>large') {
      padding: rem(verticalSpacing(desktop));
  }
}
.padding-top {
  padding-top: rem(verticalSpacing(mobile));
  @include media('>large') {
      padding-top: rem(verticalSpacing(desktop));
  }
}
.padding-top--double {
  padding-top: rem(verticalSpacing(mobile)*2);
  @include media('>large') {
      padding-top: rem(verticalSpacing(desktop)*2);
  }
}
.padding-bottom {
  padding-bottom: rem(verticalSpacing(mobile));
  @include media('>large') {
      padding-bottom: rem(verticalSpacing(desktop));
  }
}
.padding-bottom--double {
  padding-bottom: rem(verticalSpacing(mobile)*2);
  @include media('>large') {
      padding-bottom: rem(verticalSpacing(desktop)*2);
  }
}
.padding-bottom--triple {
  padding-bottom: rem(verticalSpacing(mobile)*2);
  @include media('>large') {
      padding-bottom: rem(verticalSpacing(desktop)*3);
  }
}
.padding-top--quad {
    padding-top: rem(verticalSpacing(mobile)*4);
  @include media('>large') {
      padding-top: rem(verticalSpacing(desktop)*4);
  }
}
.padding-bottom--quad {
  padding-bottom: rem(verticalSpacing(mobile)*4);
  @include media('>large') {
      padding-bottom: rem(verticalSpacing(desktop)*4);
  }
}
.padding--and-half {
  padding: rem(verticalSpacing(mobile)/1.5);
  @include media('>large') {
      padding: rem(verticalSpacing(desktop)/1.5);
  }
}
.padding--half {
  padding: rem(verticalSpacing(mobile)/2);
  @include media('>large') {
      padding: rem(verticalSpacing(desktop)/2);
  }
}
.padding--one-and-half {
  padding: rem(verticalSpacing(mobile)*1.5);
  @include media('>large') {
      padding: rem(verticalSpacing(desktop)*1.5);
  }
}
.padding--double {
  padding: rem(verticalSpacing(mobile)*2);
  @include media('>large') {
      padding: rem(verticalSpacing(desktop)*2);
  }
}
.padding--double--s {
  @include media('<=large') {
    padding-left: rem(verticalSpacing(mobile)*2);
    padding-right: rem(verticalSpacing(mobile)*2);
  }
}
.padding--zero {
  padding: 0;
}

/*------------------------------------*\
    $ARTICLE
\*------------------------------------*/

/*------------------------------------*\
    $FOOTER
\*------------------------------------*/

/*------------------------------------*\
    $HEADER
\*------------------------------------*/

/*------------------------------------*\
    $MAIN CONTENT AREA
\*------------------------------------*/

.main {
  position: relative;
}

/*------------------------------------*\
    $SIDEBAR
\*------------------------------------*/

/*------------------------------------*\
    $BLOCKS
\*------------------------------------*/

/*------------------------------------*\
    $BUTTONS
\*------------------------------------*/

.btn,
button,
input[type="submit"] {
  @include font--secondary--m;
  display: table;
  padding:$pad-half $pad;
  vertical-align: middle;
  cursor: pointer;
  color: $white;
  background-color: $button-color;
  box-shadow: none;
  border: none;
  @include transition;
  @include media('>medium') {
    padding:$pad-half $pad-and-half;
  }
  &:focus {
    outline: 0;
  }
  &:hover {
    background-color: $button-hover;
    color: $white;
  }
}

/*------------------------------------*\
    $SPECIFIC FORMS
\*------------------------------------*/
::-webkit-input-placeholder { /* Chrome/Opera/Safari */
  color: $purple;
}
::-moz-placeholder { /* Firefox 19+ */
  color: $purple;
}
:-ms-input-placeholder { /* IE 10+ */
  color: $purple;
}
:-moz-placeholder { /* Firefox 18- */
  color: $purple;
}

label {
  @include font--secondary--s;
  margin-top: $space;
  width: 100%;
}
input[type=text], input[type=email], input[type=tel], input[type=search], input[type=url], input[type=number], textarea {
  width: 100%;
}
input[type=radio],
input[type=checkbox] {
  outline: none;
  border: none;
  margin: 0;
  margin-right: rem(8);
  height: rem(15);
  width: rem(15);
  line-height: rem(15);
  background-size: rem(15);
  background-repeat: no-repeat;
  background-position: 0 0;
  cursor: pointer;
  display: block;
  float: left;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-appearance: none;
  background-color: $white;
}
input[type=radio],
input[type=checkbox] {
  border-width: 1px;
  border-style: solid;
  border-color: $border-color;
}
input[type=radio]:checked,
input[type=checkbox]:checked {
  background-color: $purple;
  box-shadow: inset 0 0 0 3px $white;
}
input[type=radio] + span,
input[type=checkbox] + span {
  display: inline-block;
  cursor: pointer;
  position: relative;
}

input[type=radio] {
  border-radius: rem(50);
}

/*------------------------------------*\
    $ICONS
\*------------------------------------*/

.icon {
  display: inline-block;
}
.icon--xs {
  width: rem(10);
  height: rem(10);
}
.icon--s {
  width: rem(20);
  height: rem(20);
}
.icon--m {
  width: rem(30);
  height: rem(30);
}
.icon--xl {
  width: rem(80);
  height: rem(80);
}

/*------------------------------------*\
    $LIST TYPES
\*------------------------------------*/

/*------------------------------------*\
    $MESSAGING
\*------------------------------------*/

/*------------------------------------*\
    $NAVIGATION
\*------------------------------------*/

/*------------------------------------*\
    $PAGE SECTIONS
\*------------------------------------*/

/*------------------------------------*\
    $TEXT TYPES
\*------------------------------------*/
/**
 * Type styles
 */

// Text Primary
@mixin font--primary--xxl() {
  font-size: rem(40);
  line-height: rem(43);
  letter-spacing: -0.5px;
  font-weight: 800;
  font-family: $font-primary;
  @include media('>large') {
    font-size: rem(66);
    line-height: rem(68);
  }
}
h1, .font--primary--xxl {
  @include font--primary--xxl;
}

@mixin font--primary--xl() {
  font-size: rem(28);
  line-height: rem(30);
  font-weight: 800;
  font-family: $font-primary;
  @include media('>large') {
    font-size: rem(52);
    line-height: rem(60);
  }
}
h2, .font--primary--xl {
  @include font--primary--xl;
}

@mixin font--primary--l() {
  font-size: rem(19);
  line-height: rem(22);
  font-weight: 700;
  font-family: $font-primary;
  @include media('>large') {
    font-size: rem(30);
    line-height: rem(38);
  }
}
.font--primary--l {
  @include font--primary--l;
}

@mixin font--primary--m() {
  font-size: rem(16);
  line-height: rem(20);
  font-weight: 800;
  font-family: $font-primary;
  @include media('>large') {
    font-size: rem(24);
    line-height: rem(30);
  }
}
h3, .font--primary--m {
  @include font--primary--m;
}

@mixin font--primary--s() {
  font-size: rem(18);
  line-height: rem(22);
  font-weight: 800;
  font-family: $font-primary;
  @include media('>large') {
    font-size: rem(20);
    line-height: rem(24);
  }
}
.font--primary--s {
  @include font--primary--s;
}

// Text Secondary
@mixin font--secondary--m() {
  font-size: rem(12);
  line-height: rem(14);
  font-weight: 700;
  font-family: $font-secondary;
  text-transform: uppercase;
  letter-spacing: 1.5px;
  @include media('>large') {
    font-size: rem(16);
    line-height: rem(18);
  }
}
h4, .font--secondary--m {
  @include font--secondary--m;
}

@mixin font--secondary--s() {
  font-size: rem(11);
  line-height: rem(13);
  text-transform: uppercase;
  font-family: $font-secondary;
  letter-spacing: 1.5px;
  font-weight: 400;
  @include media('>large') {
    font-size: rem(13);
    line-height: rem(16);
  }
}
h6, .font--secondary--s {
  @include font--secondary--s;
}

// Text Main
@mixin font--m() {
  font-size: rem(15);
  line-height: rem(20);
  font-family: $font;
  font-weight: 700;
  @include media('>large') {
    font-size: rem(18);
    line-height: rem(22);
  }
}
h5, .font--m {
  @include font--m;
}

@mixin font--s() {
  font-size: rem(12);
  line-height: rem(18);
  font-family: $font;
  font-weight: 400;
  @include media('>large') {
    font-size: rem(14);
    line-height: rem(20);
  }
}
.font--s {
  @include font--s;
}

/**
 * Text Transforms
 */
.text-transform--upper {
  text-transform: uppercase;
}
.text-transform--lower {
  text-transform: lowercase;
}
.text-transform--capitalize {
  text-transform: capitalize;
}

/**
 * Text Decorations
 */
.text-decoration--underline {
  &:hover {
    text-decoration: underline;
  }
}

/**
 * Font Weights
 */
.font-weight--400 {
  font-weight: 400;
}
.font-weight--700 {
  font-weight: 700;
}
.font-weight--800 {
  font-weight: 800;
}

.letter-spacing--normal {
  letter-spacing: 0.04em;
}

@import "tools.mixins";

/*------------------------------------*\
    $VARIABLES
\*------------------------------------*/

/**
 * Grid & Baseline Setup
 */
$fontpx: 16; // Font size (px) baseline applied to <body> and converted to %.
$defaultpx: 16; // Browser default px used for media queries
$rembase: 16; // 16px = 1.00rem
$max-width-px: 1300;
$max-width: rem($max-width-px) !default;


/**
 * Colors
 */
$gray: #767676;
$gray-light: #cdcdcd;
$white: #fff;
$black: #000;
$error: #f00;
$valid: #089e00;
$warning: #fff664;
$information: #000db5;
$overlay: rgba($black, .9);
$overlay-light: rgba($black, .76);

/**
 * Style Colors
 */
$purple: #19193d;
$pink: #e92b67;
$dark-pink: #a91f4b;
$darkest-pink: #69132f;

$background-color: #f7f5f5;
$link-color: $dark-pink;
$link-hover: $darkest-pink;
$button-color: $pink;
$button-hover: $darkest-pink;
$body-color: #232457;
$border-color: $gray-light;

/**
 * Social Colors
 */
$twitter-blue: #13C4F8;
$facebook-blue: #4A66A3;
$instagram-blue: #48769F;
$instagram-brown: #5f4132;
$pinterest-red: #FF423E;
$youtube-red: #b31217;
$google-red: $youtube-red;

/**
 * Typography
 */
$font: "franklin-gothic-urw", "Helvetica", "Arial", sans-serif;
$font-primary: "clarendon-urw", "Times New Roman", serif;
$font-secondary: "franklin-gothic-urw-cond", "Arial", sans-serif;
$sans-serif: "Helvetica", "Arial", sans-serif;
$serif: Georgia, Times, "Times New Roman", serif;
$monospace: Menlo, Monaco, "Courier New", "Courier", monospace;

// font 400, 700
// font-secondary 400, 700
// font-primary 400, 700, 800
/**
 * Amimation
 */
$cubic-bezier: cubic-bezier(0.885, -0.065, 0.085, 1.020);
$ease-bounce: cubic-bezier(.3,-0.14,.68,1.17);

/**
 * Default Spacing/Padding
 */
$space: rem(20);
$space-and-half: $space*1.5;
$space-double: $space*2;
$space-quad: $space*4;
$space-half: $space/2;
$pad: rem(20);
$pad-and-half: $pad*1.5;
$pad-double: $pad*2;
$pad-half: $pad/2;
$pad-quarter: $pad/4;
$pad-quad: $pad*4;


// uses gutter(key) function
$gutters: (
  mobile: 10,
  desktop: 10,
  super: 10
);

// Uses verticalSpacing(key) function
$verticalSpacing: (
  mobile: 20,
  desktop: 30
);

/**
 * Border Styles
 */
$border-med: 6px;
$border-thick: 8px;
$border-opacity: 1px solid rgba($white, .2);
$border-style: 1px solid $border-color;
$border-style--light: 1px solid rgba($border-color, .3);
$border-style-white: 1px solid $white;
$border-style-dark: 1px solid $black;

/**
 * Breakpoints
 */
$px200: (200/$defaultpx) + 0em;
$px250: (250/$defaultpx) + 0em;
$px300: (300/$defaultpx) + 0em;
$px320: (320/$defaultpx) + 0em;
$px330: (330/$defaultpx) + 0em;
$px350: (350/$defaultpx) + 0em;
$px400: (400/$defaultpx) + 0em;
$px450: (450/$defaultpx) + 0em;
$px500: (500/$defaultpx) + 0em;
$px550: (550/$defaultpx) + 0em;
$px600: (600/$defaultpx) + 0em;
$px650: (650/$defaultpx) + 0em;
$px700: (700/$defaultpx) + 0em;
$px750: (750/$defaultpx) + 0em;
$px760: (760/$defaultpx) + 0em;
$px800: (800/$defaultpx) + 0em;
$px850: (850/$defaultpx) + 0em;
$px900: (900/$defaultpx) + 0em;
$px950: (950/$defaultpx) + 0em;
$px1000: (1000/$defaultpx) + 0em;
$px1050: (1050/$defaultpx) + 0em;
$px1100: (1100/$defaultpx) + 0em;
$px1150: (1150/$defaultpx) + 0em;
$px1200: (1200/$defaultpx) + 0em;
$px1250: (1250/$defaultpx) + 0em;
$px1300: (1300/$defaultpx) + 0em;
$px1400: (1400/$defaultpx) + 0em;
$px1450: (1450/$defaultpx) + 0em;
$px1500: (1500/$defaultpx) + 0em;

/**
 * Icon Sizing
 */
$icon-xsmall: rem(13);
$icon-small: rem(24);
$icon-medium: rem(40);
$icon-large: rem(50);
$icon-big: rem(80);

/**
 * Common Breakpoints
 */
$small: $px500;
$medium: $px700;
$large: $px900;
$xlarge: $px1100;
$xxlarge: $px1300;
$xxxlarge: $px1500;

// uses px width / base font width to return a value in em units
$breakpoints: (
  xsmall:   $px350,
  small:    $small,
  medium:   $medium,
  large:    $large,
  xlarge:   $xlarge,
  xxlarge:  $xxlarge,
  xxxlarge: $xxxlarge
);

/**
 * Element Specific Dimensions
 */
$article-max: rem(950);
$sidebar-width: 320;
$small-header-height: 53;
$wide-header-height: 82;
$split-col1: (354/$defaultpx) + 0em; // Right padding for split layout with fixed sidebar
$split-col2: (300/$defaultpx) + 0em; // Fixed width of right column

@charset 'UTF-8';

//     _            _           _                           _ _
//    (_)          | |         | |                         | (_)
//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _
//    | | '_ \ / __| | | | |/ _` |/ _ \ | '_ ` _ \ / _ \/ _` | |/ _` |
//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |
//    |_|_| |_|\___|_|\__,_|\__,_|\___| |_| |_| |_|\___|\__,_|_|\__,_|
//
//      Simple, elegant and maintainable media queries in Sass
//                        v1.4.2
//
//                http://include-media.com
//
//         Authors: Eduardo Boucas (@eduardoboucas)
//                  Hugo Giraudel (@hugogiraudel)
//
//      This project is licensed under the terms of the MIT license


////
/// include-media library public configuration
/// @author Eduardo Boucas
/// @access public
////


///
/// Creates a list of global breakpoints
///
/// @example scss - Creates a single breakpoint with the label `phone`
///  $breakpoints: ('phone': 320px);
///
$breakpoints: (
  'phone': 320px,
  'tablet': 768px,
  'desktop': 1024px
) !default;


///
/// Creates a list of static expressions or media types
///
/// @example scss - Creates a single media type (screen)
///  $media-expressions: ('screen': 'screen');
///
/// @example scss - Creates a static expression with logical disjunction (OR operator)
///  $media-expressions: (
///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'
///  );
///
$media-expressions: (
  'screen': 'screen',
  'print': 'print',
  'handheld': 'handheld',
  'landscape': '(orientation: landscape)',
  'portrait': '(orientation: portrait)',
  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)',
  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi)'
) !default;


///
/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals
///
/// @example scss - Interval for pixels is defined as `1` by default
///  @include media('>128px') {}
///
///  /* Generates: */
///  @media (min-width: 129px) {}
///
/// @example scss - Interval for ems is defined as `0.01` by default
///  @include media('>20em') {}
///
///  /* Generates: */
///  @media (min-width: 20.01em) {}
///
/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`
///  @include media('>2.0rem') {}
///
///  /* Generates: */
///  @media (min-width: 2.1rem) {}
///
$unit-intervals: (
  'px': 1,
  'em': 0.01,
  'rem': 0.1
) !default;

///
/// Defines whether support for media queries is available, useful for creating separate stylesheets
/// for browsers that don't support media queries.
///
/// @example scss - Disables support for media queries
///  $im-media-support: false;
///  @include media('>=tablet') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* Generates: */
///  .foo {
///    color: tomato;
///  }
///
$im-media-support: true !default;

///
/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or
/// intercept the breakpoint will be displayed, any others will be ignored.
///
/// @example scss - This media query will show because it intercepts the static breakpoint
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'desktop';
///  @include media('>=tablet') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* Generates: */
///  .foo {
///    color: tomato;
///  }
///
/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'tablet';
///  @include media('>=desktop') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* No output */
///
$im-no-media-breakpoint: 'desktop' !default;

///
/// Selects which media expressions are allowed in an expression for it to be used when media queries
/// are not supported.
///
/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'desktop';
///  $im-no-media-expressions: ('screen');
///  @include media('>=tablet', 'screen') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///   /* Generates: */
///   .foo {
///     color: tomato;
///   }
///
/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted
///  $im-media-support: false;
///  $im-no-media-breakpoint: 'desktop';
///  $im-no-media-expressions: ('screen');
///  @include media('>=tablet', 'retina2x') {
///    .foo {
///      color: tomato;
///    }
///  }
///
///  /* No output */
///
$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;

////
/// Cross-engine logging engine
/// @author Hugo Giraudel
/// @access private
////


///
/// Log a message either with `@error` if supported
/// else with `@warn`, using `feature-exists('at-error')`
/// to detect support.
///
/// @param {String} $message - Message to log
///
@function log($message) {
  @if feature-exists('at-error') {
    @error $message;
  } @else {
    @warn $message;
    $_: noop();
  }

  @return $message;
}


///
/// Wrapper mixin for the log function so it can be used with a more friendly
/// API than `@if log('..') {}` or `$_: log('..')`. Basically, use the function
/// within functions because it is not possible to include a mixin in a function
/// and use the mixin everywhere else because it's much more elegant.
///
/// @param {String} $message - Message to log
///
@mixin log($message) {
  @if log($message) {}
}


///
/// Function with no `@return` called next to `@warn` in Sass 3.3
/// to trigger a compiling error and stop the process.
///
@function noop() {}

///
/// Determines whether a list of conditions is intercepted by the static breakpoint.
///
/// @param {Arglist}   $conditions  - Media query conditions
///
/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint
///
@function im-intercepts-static-breakpoint($conditions...) {
  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);

  @if not $no-media-breakpoint-value {
    @if log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}
  }

  @each $condition in $conditions {
    @if not map-has-key($media-expressions, $condition) {
      $operator: get-expression-operator($condition);
      $prefix: get-expression-prefix($operator);
      $value: get-expression-value($condition, $operator);

      // scss-lint:disable SpaceAroundOperator
      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or
          ($prefix == 'min' and $value > $no-media-breakpoint-value) {
        @return false;
      }
    } @else if not index($im-no-media-expressions, $condition) {
      @return false;
    }
  }

  @return true;
}

////
/// Parsing engine
/// @author Hugo Giraudel
/// @access private
////


///
/// Get operator of an expression
///
/// @param {String} $expression - Expression to extract operator from
///
/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `â¥`, `â¤`
///
@function get-expression-operator($expression) {
  @each $operator in ('>=', '>', '<=', '<', 'â¥', 'â¤') {
    @if str-index($expression, $operator) {
      @return $operator;
    }
  }

  // It is not possible to include a mixin inside a function, so we have to
  // rely on the `log(..)` function rather than the `log(..)` mixin. Because
  // functions cannot be called anywhere in Sass, we need to hack the call in
  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with
  // Sass 3.3, change this line in `@if log(..) {}` instead.
  $_: log('No operator found in `#{$expression}`.');
}


///
/// Get dimension of an expression, based on a found operator
///
/// @param {String} $expression - Expression to extract dimension from
/// @param {String} $operator - Operator from `$expression`
///
/// @return {String} - `width` or `height` (or potentially anything else)
///
@function get-expression-dimension($expression, $operator) {
  $operator-index: str-index($expression, $operator);
  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);
  $dimension: 'width';

  @if str-length($parsed-dimension) > 0 {
    $dimension: $parsed-dimension;
  }

  @return $dimension;
}


///
/// Get dimension prefix based on an operator
///
/// @param {String} $operator - Operator
///
/// @return {String} - `min` or `max`
///
@function get-expression-prefix($operator) {
  @return if(index(('<', '<=', 'â¤'), $operator), 'max', 'min');
}


///
/// Get value of an expression, based on a found operator
///
/// @param {String} $expression - Expression to extract value from
/// @param {String} $operator - Operator from `$expression`
///
/// @return {Number} - A numeric value
///
@function get-expression-value($expression, $operator) {
  $operator-index: str-index($expression, $operator);
  $value: str-slice($expression, $operator-index + str-length($operator));

  @if map-has-key($breakpoints, $value) {
    $value: map-get($breakpoints, $value);
  } @else {
    $value: to-number($value);
  }

  $interval: map-get($unit-intervals, unit($value));

  @if not $interval {
    // It is not possible to include a mixin inside a function, so we have to
    // rely on the `log(..)` function rather than the `log(..)` mixin. Because
    // functions cannot be called anywhere in Sass, we need to hack the call in
    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with
    // Sass 3.3, change this line in `@if log(..) {}` instead.
    $_: log('Unknown unit `#{unit($value)}`.');
  }

  @if $operator == '>' {
    $value: $value + $interval;
  } @else if $operator == '<' {
    $value: $value - $interval;
  }

  @return $value;
}


///
/// Parse an expression to return a valid media-query expression
///
/// @param {String} $expression - Expression to parse
///
/// @return {String} - Valid media query
///
@function parse-expression($expression) {
  // If it is part of $media-expressions, it has no operator
  // then there is no need to go any further, just return the value
  @if map-has-key($media-expressions, $expression) {
    @return map-get($media-expressions, $expression);
  }

  $operator: get-expression-operator($expression);
  $dimension: get-expression-dimension($expression, $operator);
  $prefix: get-expression-prefix($operator);
  $value: get-expression-value($expression, $operator);

  @return '(#{$prefix}-#{$dimension}: #{$value})';
}

///
/// Slice `$list` between `$start` and `$end` indexes
///
/// @access private
///
/// @param {List} $list - List to slice
/// @param {Number} $start [1] - Start index
/// @param {Number} $end [length($list)] - End index
///
/// @return {List} Sliced list
///
@function slice($list, $start: 1, $end: length($list)) {
  @if length($list) < 1 or $start > $end {
    @return ();
  }

  $result: ();

  @for $i from $start through $end {
    $result: append($result, nth($list, $i));
  }

  @return $result;
}

////
/// String to number converter
/// @author Hugo Giraudel
/// @access private
////


///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}


///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @if not index(map-keys($units), $unit) {
    $_: log('Invalid unit `#{$unit}`.');
  }

  @return $value * map-get($units, $unit);
}

///
/// This mixin aims at redefining the configuration just for the scope of
/// the call. It is helpful when having a component needing an extended
/// configuration such as custom breakpoints (referred to as tweakpoints)
/// for instance.
///
/// @author Hugo Giraudel
///
/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`
/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`
///
/// @example scss - Extend the global breakpoints with a tweakpoint
///  @include media-context(('custom': 678px)) {
///    .foo {
///      @include media('>phone', '<=custom') {
///       // ...
///      }
///    }
///  }
///
/// @example scss - Extend the global media expressions with a custom one
///  @include media-context($tweak-media-expressions: ('all': 'all')) {
///    .foo {
///      @include media('all', '>phone') {
///       // ...
///      }
///    }
///  }
///
/// @example scss - Extend both configuration maps
///  @include media-context(('custom': 678px), ('all': 'all')) {
///    .foo {
///      @include media('all', '>phone', '<=custom') {
///       // ...
///      }
///    }
///  }
///
@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {
  // Save global configuration
  $global-breakpoints: $breakpoints;
  $global-media-expressions: $media-expressions;

  // Update global configuration
  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;
  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;

  @content;

  // Restore global configuration
  $breakpoints: $global-breakpoints !global;
  $media-expressions: $global-media-expressions !global;
}

////
/// include-media public exposed API
/// @author Eduardo Boucas
/// @access public
////


///
/// Generates a media query based on a list of conditions
///
/// @param {Arglist}   $conditions  - Media query conditions
///
/// @example scss - With a single set breakpoint
///  @include media('>phone') { }
///
/// @example scss - With two set breakpoints
///  @include media('>phone', '<=tablet') { }
///
/// @example scss - With custom values
///  @include media('>=358px', '<850px') { }
///
/// @example scss - With set breakpoints with custom values
///  @include media('>desktop', '<=1350px') { }
///
/// @example scss - With a static expression
///  @include media('retina2x') { }
///
/// @example scss - Mixing everything
///  @include media('>=350px', '<tablet', 'retina3x') { }
///
@mixin media($conditions...) {
  // scss-lint:disable SpaceAroundOperator
  @if ($im-media-support and length($conditions) == 0) or
      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {
    @content;
  } @else if ($im-media-support and length($conditions) > 0) {
    @media #{unquote(parse-expression(nth($conditions, 1)))} {
      // Recursive call
      @include media(slice($conditions, 2)...) {
        @content;
      }
    }
  }
}

/*------------------------------------*\
    $MIXINS
\*------------------------------------*/

// ============================================================
//
// @source: http://alwaystwisted.com/post.php?s=2013-04-01-my-media-query-mixin
//
// @mixin mq($point, $IE9: false, $query1: min, $query2: width)
// - Outputs media query with fallback no media query support
//
// @param $point       : pixel value for your major or minor breakpoint
// @param $query1      : this is for either min, max, min-device, or max-device
//                       defining the first part of the media query. Predefined
//                       as min.
// @param $query2      : this if for either width or height defining the second
//                       part of the media query. Predefined as max
// @param $IE9         : predefined as false, changing this to true would
//                       include the IE9 conditional class of CSS
//
//===================================
//
// Example:
//
// .example {
//   @include mq(320) {
//     width: 100%;
//   }
// }
//
// ============================================================
@mixin mq($point, $query1: min, $query2: width, $IE9: false) {
  @if $IE9 == true{
    .lt-ie9 & {
      @content;
    }
  }
  @media (#{$query1}-#{$query2}: $point) {
    @content;
  }
}

// ============================================================
//
// @mixin rem($property, $sizeValue)
// -Outputs rem and fallback px values
//
// @param property       : font-size, padding-bottom, (any property that accepts 1 value)
// @param sizeValue      : value in px
//
//===================================
//
// Example, rembase size is 14px:
//
// @include rem('font-size', 16);
//  => font-size: 16px;
//     font-size: 1.14286rem;
//
// ============================================================
@mixin rem($property, $sizeValue: $rembase) {
  $length: length($sizeValue);
  @if type-of($sizeValue) == "number" {
    #{$property}: strip-unit($sizeValue) + px;
    #{$property}: (strip-unit($sizeValue)/$rembase) + rem;
  } @else {
    // Create list to append values to.
    $allvalues: ();
    $allvaluespx: ();
    @each $singleValue in $sizeValue {
      @if $singleValue == 0 or type-of($singleValue) != "number" {
        // Append 0 as is or strings such as 'auto'.
        $allvaluespx: append($allvaluespx, $singleValue);
        $allvalues: append($allvalues, $singleValue);
      } @else {
        $allvaluespx: append($allvaluespx, $singleValue + 0px);
        $allvalues: append($allvalues, ( strip-unit($singleValue) / $rembase) + 0rem);
      }
    }
    #{$property}: $allvaluespx;
    #{$property}: $allvalues;
  }
}

/**
 * Mixin for placeholder styling
 */
@mixin placeHolder($color) {
  &::-webkit-input-placeholder { color: $color; }
  &:-moz-placeholder { color: $color; }
}

/**
 * Center-align a block level element
 */
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

/**
 * Convert px to ems
 */
@function em($target, $context: $fontpx) {
  @if $target == 0 { @return 0 }
  @return $target / $context + 0em;
}

/**
 * Background gradient
 */
@mixin bg-gradient($height: 150, $top: auto, $bottom: 0, $color1: rgba(black, 0), $color2: black) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    z-index: 0;
    position: absolute;
    top: $top;
    bottom: $bottom;
    left: 0;
    @include rem(height, $height);
    @include background-image(linear-gradient($color1, $color2 100%));
  }
}

/**
 * Transition all the things
 */
@mixin transition {
  -webkit-transition: all .3s ease-in-out;
  -moz-transition: all .3s ease-in-out;
  -o-transition: all .3s ease-in-out;
  -ms-transition: all .3s ease-in-out;
  transition: all .3s ease-in-out;
}

/**
 * Remove the unit from a number
 */
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/**
 * Better Underlines
 */
@mixin underline($color) {
  a {
    color: $color;
    background-repeat: repeat-x; // make it horizontal
    background-position: 0 100%; // change the second value to adjust how far from the top the underline should be
    background-size: 100% 2px; // change the second value to the desired height of the underline
    @include background-image(linear-gradient(to right, transparent 0%, transparent 100%));
  }
  a:hover {
    color: $color;
    @include background-image(linear-gradient(to right, $color 0%, $color 100%));
  }
}

/**
 * Standard paragraph
 */
@mixin p {
  font-family: $font;
  font-weight: 400;
  font-size: rem(15);
  line-height: rem(20);
  @include media('>medium') {
    font-size: rem(18);
    line-height: rem(26);
  }
}

/**
 * Various filters
 * https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html
 *
 * grayscale      ex: filter: grayscale(100%);
 * sepia          ex: filter: sepia(100%);
 * saturate       ex: filter: saturate(0%);
 * hue-rotate     ex: filter: hue-rotate(45deg);
 * invert         ex: filter: invert(100%);
 * brightness     ex: filter: brightness(15%);
 * contrast       ex: filter: contrast(200%);
 * blur           ex: filter: blur(2px);
 */
@mixin filter($filter-type, $filter-amount) {
  -webkit-filter: $filter-type+unquote('(#{$filter-amount})');
  -moz-filter: $filter-type+unquote('(#{$filter-amount})');
  -ms-filter: $filter-type+unquote('(#{$filter-amount})');
  -o-filter: $filter-type+unquote('(#{$filter-amount})');
  filter: $filter-type+unquote('(#{$filter-amount})');
}

/**
 * Maintain aspect ratio
 */
@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .ratio-content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

// For more information on Sassy Maps, please see:
// https://github.com/at-import/Sassy-Maps

/**
 * Function to access $gutters map
 */
@function gutter($key: mobile) {
  @if map-has-key($gutters, $key) {
    @return map-get($gutters, $key);
  }

  @warn "Unknown `#{$key}` in $gutters.";
  @return null;
}

// Function to access $verticalSpacing map
@function verticalSpacing($key: mobile) {
  @if map-has-key($verticalSpacing, $key) {
    @return map-get($verticalSpacing, $key);
  }
  @warn "Unknown `#{$key}` in $verticalSpacing.";
  @return null;
}

/**
 * Mixin scrollbar
 */
@mixin scrollbar($size, $primary, $secondary: lighten($primary, 25%)) {
  &::-webkit-scrollbar {
    width:  $size;
    height: $size;
  }
  &::-webkit-scrollbar-thumb {
    background-color: $primary;
  }
  &::-webkit-scrollbar-track {
    background-color: $secondary;
  }
}

/*------------------------------------*\
    $MEDIA QUERY TESTS
\*------------------------------------*/

@if $tests == true {
  body {
    &:before {
      display: block;
      position: fixed;
      z-index: 100000;
      background: black;
      bottom: 0;
      right: 0;
      padding: .5em 1em;
      content: 'No Media Query';
      color: transparentize(#fff,.25);
      border-top-left-radius: 10px;
      font-size: (12/16)+em;

      @media print {
        display: none;
      }
    }
    &:after {
      display: block;
      position: fixed;
      height: 5px;
      bottom: 0;
      left: 0;
      right: 0;
      z-index: (100000-1);
      content: '';
      background: black;

      @media print {
        display: none;
      }
    }

    @include media('>xsmall') {
      &:before {
        content: 'xsmall: 350px';
      }
      &:before,
      &:after {
        background: dodgerblue;
      }
    }

    @include media('>small') {
      &:before {
        content: 'small: 500px';
      }
      &:before,
      &:after {
        background: darkseagreen;
      }
    }

    @include media('>medium') {
      &:before {
        content: 'medium: 700px';
      }
      &:before,
      &:after {
        background: lightcoral;
      }
    }

    @include media('>large') {
      &:before {
        content: 'large: 900px';
      }
      &:before,
      &:after {
        background: mediumvioletred;
      }
    }

    @include media('>xlarge') {
      &:before {
        content: 'xlarge: 1100px';
      }
      &:before,
      &:after {
        background: hotpink;
      }
    }

    @include media('>xxlarge') {
      &:before {
        content: 'xxlarge: 1300px';
      }
      &:before,
      &:after {
        background: orangered;
      }
    }

    @include media('>xxxlarge') {
      &:before {
        content: 'xxxlarge: 1400px';
      }
      &:before,
      &:after {
        background: dodgerblue;
      }
    }
  }
}

/*------------------------------------*\
    $HELPER/TRUMP CLASSES
\*------------------------------------*/

/**
 * Clearfix - extends outer container with floated children.
 */
.cf {
  zoom: 1;
}
.cf:before, .cf:after {
  content: " "; // 1
  display: table; // 2
}
.cf:after {
  clear: both;
}
.float--right {
  float: right;
}
/**
 * Hide elements only present and necessary for js enabled browsers.
 */
.no-js .no-js-hide {
  display: none;
}

/**
 * Positioning
 */
.position--relative {
  position: relative;
}
.position--absolute {
  position: absolute;
}

/**
 * Alignment
 */
.text-align--right {
  text-align: right;
}
.text-align--center {
  text-align: center;
}
.text-align--left {
  text-align: left;
}
.center-block {
  margin-left: auto;
  margin-right: auto;
}
.align--center {
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  display: flex;
  align-items: center;
}

/**
 * Background Covered
 */
.background--cover {
  background-size: cover;
  background-position: center center;
  background-repeat: no-repeat;
}
.background-image {
  background-size: 100%;
  background-repeat: no-repeat;
}


/**
 * Flexbox
 */
.align-items--center {
  align-items: center;
}
.align-items--end {
  align-items: flex-end;
}
.align-items--start {
  align-items: flex-start;
}
.justify-content--center {
  justify-content: center;
}

/**
 * Misc
 */
.overflow--hidden {
  overflow: hidden;
}
.width--50p {
  width: 50%;
}
.width--100p {
  width: 100%;
}
.z-index--back {
  z-index: -1;
}
.max-width--none {
  max-width: none;
}

/**
 * CONTENTS
 *
 * SETTINGS
 * Bourbon..............Simple/lighweight SASS library - http://bourbon.io/
 * Variables............Globally-available variables and config.
 *
 * TOOLS
 * Mixins...............Useful mixins.
 * Include Media........Sass library for writing CSS media queries.
 * Media Query Test.....Displays the current breakport you're in.
 *
 * GENERIC
 * Reset................A level playing field.
 *
 * BASE
 * Fonts................@font-face included fonts.
 * Forms................Common and default form styles.
 * Headings.............H1âH6 styles.
 * Links................Link styles.
 * Lists................Default list styles.
 * Main.................Page body defaults.
 * Media................Image and video styles.
 * Tables...............Default table styles.
 * Text.................Default text styles.
 *
 * LAYOUT
 * Grids................Grid/column classes.
 * Wrappers.............Wrapping/constraining elements.
 *
 * TEXT
 * Text.................Various text-specific class definitions.
 *
 * COMPONENTS
 * Blocks...............Modular components often consisting of text amd media.
 * Buttons..............Various button styles and styles.
 * Messaging............User alerts and announcements.
 * Icons................Icon styles and settings.
 * Lists................Various site list styles.
 * Navs.................Site navigations.
 * Sections.............Larger components of pages.
 * Forms................Specific form styling.
 *
 * PAGE STRUCTURE
 * Article..............Post-type pages with styled text.
 * Footer...............The main page footer.
 * Header...............The main page header.
 * Main.................Content area styles.
 *
 * MODIFIERS
 * Animations...........Animation and transition effects.
 * Borders..............Various borders and divider styles.
 * Colors...............Text and background colors.
 * Display..............Show and hide and breakpoint visibility rules.
 * Filters..............CSS filters styles.
 * Spacings.............Padding and margins in classes.
 *
 * TRUMPS
 * Helper Classes.......Helper classes loaded last in the cascade.
 */

$output-bourbon-deprecation-warnings: false !default;
/*------------------------------------*\
    $SETTINGS
\*------------------------------------*/
@import "bourbon";
@import "settings.variables.scss";

/*------------------------------------*\
    $TOOLS
\*------------------------------------*/
@import "tools.mixins";
@import "tools.include-media";
$tests: true;
@import "tools.mq-tests";


/*------------------------------------*\
    $GENERIC
\*------------------------------------*/
@import "generic.reset";


/*------------------------------------*\
    $BASE
\*------------------------------------*/
@import "base.fonts";
@import "base.forms";
@import "base.headings";
@import "base.links";
@import "base.lists";
@import "base.main";
@import "base.media";
@import "base.tables";
@import "base.text";


/*------------------------------------*\
    $LAYOUT
\*------------------------------------*/
@import "layout.grids";
@import "layout.wrappers";


/*------------------------------------*\
    $TEXT
\*------------------------------------*/
@import "objects.text";


/*------------------------------------*\
    $COMPONENTS
\*------------------------------------*/
@import "objects.blocks";
@import "objects.buttons";
@import "objects.messaging";
@import "objects.icons";
@import "objects.lists";
@import "objects.navs";
@import "objects.sections";
@import "objects.forms";


/*------------------------------------*\
    $PAGE STRUCTURE
\*------------------------------------*/
@import "module.article";
@import "module.sidebar";
@import "module.footer";
@import "module.header";
@import "module.main";


/*------------------------------------*\
    $MODIFIERS
\*------------------------------------*/
@import "modifier.animations";
@import "modifier.borders";
@import "modifier.colors";
@import "modifier.display";
@import "modifier.filters";
@import "modifier.spacing";


/*------------------------------------*\
    $TRUMPS
\*------------------------------------*/
@import "trumps.helper-classes";
